name: Release

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check commit message for release keyword
        id: check_commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" != *"release"* ]]; then
            echo "Commit message does not contain 'release'. Exiting."
            exit 1
          fi
          echo "Commit message contains 'release'. Proceeding."
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=src" >> $GITHUB_ENV

      - name: List directory contents
        run: ls -R

      - name: Run tests directly
        env:
          PYTHONPATH: ./src
        run: python -m unittest discover -s tests

      - name: Run tests with coverage
        env:
          PYTHONPATH: ./src
        run: coverage run -m unittest discover -s tests

      - name: Generate coverage report
        run: coverage report

      - name: Get version from commit message
        id: get_version
        run: |
          echo "Reading commit message from environment"
          COMMIT_MESSAGE="${{ env.COMMIT_MESSAGE }}"
          echo "Commit message: $COMMIT_MESSAGE"
          VERSION=$(echo "$COMMIT_MESSAGE" | grep -oP 'release\s+\K\S+' || echo "undefined")
          if [[ -z "$VERSION" ]]; then
            echo "No version found in commit message. Exiting."
            exit 1
          fi
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Create release
        if: env.VERSION != 'undefined'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: Release ${{ env.VERSION }} generated by workflow
          draft: false